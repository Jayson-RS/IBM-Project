# -*- coding: utf-8 -*-
"""Health AI.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DHCul9IwT84P2tysKXeO23efcienX4YV
"""

!pip install transformers torch gradio -q

# It's highly recommended to upgrade gradio for the best experience
# and to use newer components like gr.Box.
!pip install -q --upgrade gradio
!pip install -q transformers torch

import gradio as gr
import torch
from transformers import AutoTokenizer, AutoModelForCausalLM

# --- Global Variables for Login (for demonstration purposes only) ---
VALID_USERNAME = "user"
VALID_PASSWORD = "password"

# -------------------------------
# Load model and tokenizer
# -------------------------------
# Note: This step can take a few minutes in Colab
model_name = "ibm-granite/granite-3.2-2b-instruct"
tokenizer = AutoTokenizer.from_pretrained(model_name)

# Pick device automatically: CUDA > MPS > CPU
device = (
    "cuda"
    if torch.cuda.is_available()
    else "mps"
    if torch.backends.mps.is_available()
    else "cpu"
)

# Load model with appropriate dtype
model = AutoModelForCausalLM.from_pretrained(
    model_name,
    torch_dtype=torch.float16 if device == "cuda" else torch.float32,
).to(device)

# Fix padding issues
if tokenizer.pad_token is None:
    tokenizer.pad_token = tokenizer.eos_token
    model.config.pad_token_id = tokenizer.eos_token_id


# -------------------------------
# Text generation helper
# -------------------------------
def generate_response(prompt, max_length=1024):
    inputs = tokenizer(
        prompt, return_tensors="pt", truncation=True, max_length=512
    )
    inputs = {k: v.to(device) for k, v in inputs.items()}

    with torch.no_grad():
        outputs = model.generate(
            **inputs,
            max_length=max_length,
            temperature=0.7,
            do_sample=True,
            pad_token_id=tokenizer.eos_token_id,
        )

    response = tokenizer.decode(outputs[0], skip_special_tokens=True).strip()

    # Remove the prompt safely if model echoes it
    if response.startswith(prompt):
        response = response[len(prompt):].strip()

    return response


# -------------------------------
# App functions
# -------------------------------
def disease_prediction(symptoms):
    prompt = (
        "Based on the following symptoms, provide possible medical "
        "conditions and general medication suggestions. Always emphasize "
        "the importance of consulting a doctor for proper diagnosis.\n\n"
        f"Symptoms: {symptoms}\n\n"
        "Possible conditions and recommendations:\n\n"
        "**IMPORTANT: This is for informational purposes only. "
        "Please consult a healthcare professional for proper "
        "diagnosis and treatment.**\n\nAnalysis:"
    )
    return generate_response(prompt, max_length=1200)


def treatment_plan(condition, age, gender, medical_history):
    prompt = (
        "Generate personalized treatment suggestions for the following "
        "patient information. Include home remedies and general medication "
        "guidelines.\n\n"
        f"Medical Condition: {condition}\n"
        f"Age: {age}\n"
        f"Gender: {gender}\n"
        f"Medical History: {medical_history}\n\n"
        "Personalized treatment plan including home remedies and medication "
        "guidelines:\n\n"
        "**IMPORTANT: This is for informational purposes only. "
        "Please consult a healthcare professional for proper treatment.**\n\n"
        "Treatment Plan:"
    )
    return generate_response(prompt, max_length=1200)

def health_tips(topic):
    prompt = (
        f"Provide five concise and actionable health tips related to '{topic}'. "
        "Format them as a numbered list.\n\n"
        "Health Tips:\n"
    )
    return generate_response(prompt, max_length=500)

def medication_info(medication_name):
    prompt = (
        f"Provide general information about the medication '{medication_name}', "
        "including its common uses, potential side effects, and important precautions. "
        "**Disclaimer: This information is for general knowledge and should not replace professional medical advice.**\n\n"
        "Medication Information:\n"
    )
    return generate_response(prompt, max_length=800)


# -------------------------------
# Gradio Login/Logout Functions
# -------------------------------
def login(username, password):
    if username == VALID_USERNAME and password == VALID_PASSWORD:
        # On success: return new state, hide login, show app, clear login message
        return True, gr.update(visible=False), gr.update(visible=True), ""
    else:
        # On failure: return old state, no visibility change, show error message
        return False, gr.update(), gr.update(), "Invalid credentials. Please try again."

def logout():
    # On logout: return new state, show login, hide app, provide login prompt
    return False, gr.update(visible=True), gr.update(visible=False), "Please log in to access the Medical AI Assistant."


def update_greeting(is_logged_in):
    if is_logged_in:
        return gr.update(value=f"Welcome, {VALID_USERNAME}!")
    return gr.update(value="")

# -------------------------------
# Build Gradio Interface
# -------------------------------
with gr.Blocks(title="Medical AI Assistant", theme=gr.themes.Soft()) as app:
    # State for login status
    logged_in = gr.State(False)

    # --- Header ---
    gr.Markdown("<h1 style='text-align: center; color: #1E90FF;'>ðŸ©º Medical AI Assistant</h1>")
    gr.Markdown(
        "<p style='text-align: center; color: #FF4500;'><b>Disclaimer:</b> This tool is for informational purposes only. "
        "Always consult qualified healthcare professionals for medical advice.</p>"
    )

    # --- Login Page ---
    with gr.Group(visible=True) as login_page:
        # FIX: Replaced gr.Box() with gr.Column() for compatibility with older Gradio versions.
        with gr.Column(elem_id="login-form"):
            gr.Markdown("<h2 style='text-align: center;'>Login</h2>")
            login_message = gr.Markdown("Please log in to access the Medical AI Assistant.", elem_id="login_message")
            username_input = gr.Textbox(label="Username", placeholder="Enter your username", value=VALID_USERNAME)
            password_input = gr.Textbox(label="Password", type="password", placeholder="Enter your password", value=VALID_PASSWORD)
            login_btn = gr.Button("Login", variant="primary")

    # --- Main Application Page ---
    with gr.Group(visible=False) as main_app_page:
        # FIX: Replaced gr.Box() with gr.Column()
        with gr.Column():
            with gr.Row():
                user_greeting = gr.Markdown("", elem_id="user_greeting")
                logout_btn = gr.Button("Logout", variant="secondary")

            with gr.Tabs():
                with gr.TabItem("Disease Prediction"):
                    gr.Markdown("<h3>Analyze your symptoms to get possible conditions and recommendations.</h3>")
                    with gr.Row(equal_height=True):
                        with gr.Column(scale=1):
                            symptoms_input = gr.Textbox(
                                label="Enter Symptoms",
                                placeholder="e.g., fever, headache, cough, fatigue...",
                                lines=4,
                            )
                            predict_btn = gr.Button("Analyze Symptoms", variant="primary")
                        with gr.Column(scale=2):
                            prediction_output = gr.TextArea(
                                label="Possible Conditions & Recommendations", lines=15
                            )
                    predict_btn.click(
                        disease_prediction,
                        inputs=symptoms_input,
                        outputs=prediction_output,
                    )

                with gr.TabItem("Treatment Plans"):
                    gr.Markdown("<h3>Get personalized treatment suggestions based on your condition.</h3>")
                    with gr.Row(equal_height=True):
                        with gr.Column(scale=1):
                            condition_input = gr.Textbox(
                                label="Medical Condition",
                                placeholder="e.g., diabetes, hypertension, migraine...",
                                lines=2,
                            )
                            age_input = gr.Number(label="Age", value=30, precision=0)
                            gender_input = gr.Dropdown(
                                choices=["Male", "Female", "Other"],
                                label="Gender",
                                value="Male",
                            )
                            history_input = gr.Textbox(
                                label="Medical History",
                                placeholder="Previous conditions, allergies, medications or None",
                                lines=3,
                            )
                            plan_btn = gr.Button("Generate Treatment Plan", variant="primary")
                        with gr.Column(scale=2):
                            plan_output = gr.TextArea(
                                label="Personalized Treatment Plan", lines=20
                            )
                    plan_btn.click(
                        treatment_plan,
                        inputs=[condition_input, age_input, gender_input, history_input],
                        outputs=plan_output,
                    )

                with gr.TabItem("Health Tips"):
                    gr.Markdown("<h3>Receive general health tips on various topics.</h3>")
                    with gr.Row(equal_height=True):
                        with gr.Column(scale=1):
                            topic_input = gr.Textbox(
                                label="Topic for Health Tips",
                                placeholder="e.g., healthy eating, stress management, exercise...",
                                lines=1,
                            )
                            tips_btn = gr.Button("Get Health Tips", variant="primary")
                        with gr.Column(scale=2):
                            tips_output = gr.TextArea(
                                label="Generated Health Tips", lines=10
                            )
                    tips_btn.click(
                        health_tips,
                        inputs=topic_input,
                        outputs=tips_output,
                    )

                with gr.TabItem("Medication Information"):
                    gr.Markdown("<h3>Get general information about medications.</h3>")
                    with gr.Row(equal_height=True):
                        with gr.Column(scale=1):
                            medication_name_input = gr.Textbox(
                                label="Medication Name",
                                placeholder="e.g., Ibuprofen, Paracetamol, Metformin...",
                                lines=1,
                            )
                            med_info_btn = gr.Button("Get Medication Info", variant="primary")
                        with gr.Column(scale=2):
                            med_info_output = gr.TextArea(
                                label="Medication Details", lines=10
                            )
                    med_info_btn.click(
                        medication_info,
                        inputs=medication_name_input,
                        outputs=med_info_output,
                    )

    # --- Event Handlers for Login/Logout ---
    login_btn.click(
        login,
        inputs=[username_input, password_input],
        outputs=[logged_in, login_page, main_app_page, login_message]
    ).then(
        update_greeting,
        inputs=[logged_in],
        outputs=[user_greeting]
    )

    logout_btn.click(
        logout,
        inputs=[],
        outputs=[logged_in, login_page, main_app_page, login_message]
    )

# -------------------------------
# Launch App
# -------------------------------
app.launch(share=True, debug=True)